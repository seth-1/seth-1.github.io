xanNames <- as.character(gcSmInfoSub$real_name[gcSmInfoSub$cc == i])
svg(sprintf('/home/seth/aspSecMet/xanthones/fam%sTree.svg', i), width = 12, height = 15)
plot(rnTree, tip.color = c("#999999","#3366CC")[( rnTree$tip.label %in% xanNames )+1])
dev.off()
}
network
head(gcSmInfoSub)
for(i in c(c(85,86,87, 88,89,214, 234,399)) ){
svg(sprintf('/home/seth/aspSecMet/xanthones/fam%s.svg', i))
gVizComplete(gcSmInfoSub$clust_id[gcSmInfoSub$cc == i,])
dev.off()
}
for(i in c(c(85,86,87, 88,89,214, 234,399)) ){
svg(sprintf('/home/seth/aspSecMet/xanthones/fam%s.svg', i))
gVizComplete(gcSmInfoSub$clust_id[gcSmInfoSub$cc == i])
dev.off()
}
warnings()
for(i in c(c(85,86,87, 88,89,214, 234,399)) ){
svg(sprintf('/home/seth/aspSecMet/xanthones/fam%s.svg', i))
gVizComplete(gcSmInfoSub$clust_id[gcSmInfoSub$cc == i])
dev.off()
}
source('/home/seth/aspSecMet/aspSethTools.R')
source('/home/seth/aspSecMet/aspSethTools.R')
gcData <- aspDbFetch("SELECT synteny.sm_protein_id, synteny.sm_short, gff_type, gff_attributes  , gff_start , gff_end , gff_exonnr, GROUP_CONCAT(DISTINCT(ipr_desc))
FROM smurf_synteny AS synteny
JOIN gff ON clust_id = '46_455954_9' AND synteny.org_id = gff.org_id AND synteny.sm_protein_id = gff.gff_protein_id
JOIN protein_has_ipr AS phi ON synteny.org_id = phi.org_id AND synteny.sm_protein_id = phi.protein_id
JOIN ipr ON phi.ipr_id = ipr.ipr_id GROUP BY synteny.org_id, synteny.sm_protein_id, gff_start, gff_end;")
write.csv(file = '/home/seth/aspSecMet/ibericusAurasperone.csv', gcData)
write.csv(file = '/home/seth/aspSecMet/ibericusAurasperone.csv', gcData, row.names = FALSE)
gcData <- aspDbFetch("SELECT synteny.sm_protein_id, synteny.sm_short, gff_type, gff_attributes  , gff_start , gff_end, gff_strand , gff_exonnr, GROUP_CONCAT(DISTINCT(ipr_desc))
FROM smurf_synteny AS synteny
JOIN gff ON clust_id = '46_455954_9' AND synteny.org_id = gff.org_id AND synteny.sm_protein_id = gff.gff_protein_id
JOIN protein_has_ipr AS phi ON synteny.org_id = phi.org_id AND synteny.sm_protein_id = phi.protein_id
JOIN ipr ON phi.ipr_id = ipr.ipr_id GROUP BY synteny.org_id, synteny.sm_protein_id, gff_start, gff_end;")
write.csv(file = '/home/seth/aspSecMet/ibericusAurasperone.csv', gcData, row.names = FALSE)
source('/home/seth/aspSecMet/aspSethTools.R')
hybridDf <- aspDbFetch("SELECT smurf.org_id, genus, section, real_name, sm_protein_id, CONCAT(smurf.org_id, '_', sm_protein_id) AS custom_id, CONCAT(smurf.org_id, '_', clust_backbone, '_', clust_size) AS clust_id FROM smurf JOIN organism ON smurf.org_id = organism.org_id AND sm_short = 'HYBRID';")
hybridsBySection <- aggregate(clust_id ~ real_name + section, hybridDf, length)
boxes <- ggplot(hybridsBySection, aes(x=section, y=clust_id, fill = section)) + geom_boxplot() + guides(fill = FALSE) + ylab("Counts") + xlab("Section")
#ggsave(file = '/home/seth/aspSecMet/hybrids/overview.pdf', plot = boxes, device = "pdf", width = 10)
ggsave(file = '/home/seth/aspSecMet/hybrids/overview.svg', plot = boxes, device = "svg", width = 10)
# Putting counts on the tree
hybridCounts <- as.data.frame(table(hybridDf$real_name))
hybridCounts$Var1 <- as.character(hybridCounts$Var1)
tipNames <- data.frame(tips = rnTree$tip.label)
tipCounts <- left_join(tipNames, hybridCounts, by = c("tips" = "Var1"))
tipCounts$Freq[is.na(tipCounts$Freq)] <- 0
#pdf(file = '/home/seth/aspSecMet/hybrids/spciesTree.pdf', height = 10, width = 10)
svg(file = '/home/seth/aspSecMet/hybrids/spciesTree.svg', height = 10, width = 10)
plot(rnTree, align.tip.label = TRUE, type = 'fan', label.offset = 0.1)
tiplabels(tipCounts$Freq)
dev.off()
# Inspecting families based on whole gene clusters
hybridFams <- gcHcDf[gcHcDf$q_clust %in% hybridDf$clust_id,]
table(hybridFams$real_name)
as.matrix(table(hybridFams[c('cc', 'real_name')]))
print(paste0("Hybrid genes: ", dim(unique(hybridDf[,c('org_id', 'sm_protein_id')]))[1]))
print(paste0(length(unique(hybridFams$q_clust))," hybrid gene carrying clusters are distributed over ",length(unique(hybridFams$cc))," orthologous families"))
# Create dendrogram of Hybrids
hybridBlast <- aspDbFetch("SELECT bidir.*,
CONCAT(bidir.q_org_id,'_',bidir.q_protein_id) AS q_custom,
CONCAT(bidir.h_org_id,'_',bidir.h_protein_id) AS h_custom  FROM smurf
JOIN smurf_bidir_hits AS bidir ON sm_short = 'HYBRID'
AND smurf.org_id = bidir.q_org_id AND smurf.sm_protein_id = bidir.q_protein_id
;") #JOIN smurf_bidir_hits AS bidir2 ON smurf.org_id = bidir2.h_org_id AND smurf.sm_protein_id = bidir2.h_protein_id
sub <- hybridBlast[,c('q_custom', 'h_custom', 'pident')]
distTemp <- cast(sub, q_custom ~ h_custom,value = 'pident', fun.aggregate = mean)
distTemp[is.na(distTemp)] <- 0
rownames(distTemp) <- distTemp$q_custom
distTemp$q_custom <- NULL
distFinal <- dist(distTemp)
hc <- hclust(distFinal, method = 'complete')
#plot(as.phylo(hcOld), type = "fan", show.tip.label = FALSE)
gcDend <- as.dendrogram(hc)
#pdf(file = '/home/seth/aspSecMet/hybrids/hybridClusteredFan.pdf', height = 15, width = 15)
svg(file = '/home/seth/aspSecMet/hybrids/hybridClusteredFan.svg', height = 15, width = 15)
plot(as.phylo(hc), type = 'fan', cex = 0.8)
dev.off()
#pdf(file = '/home/seth/aspSecMet/hybrids/hybridClusteredDend.pdf', height = 10, width = 25)
svg(file = '/home/seth/aspSecMet/hybrids/hybridClusteredDend.svg', height = 10, width = 25)
plot(hc, cex = 0.8)
dev.off()
# How many does each one share? What are unique Hybrid genes?
boxes
ggsave(file = '/home/seth/aspSecMet/hybrids/overview.svg', plot = boxes, device = "svg", width = 10)
remove.packages("ggplot2", lib="/usr/local/lib/R/site-library")
remove.packages("ggplot2", lib="/usr/lib/R/site-library")
source('/home/seth/aspSecMet/aspSethTools.R')
require(networkD3)
hybridDf <- aspDbFetch("SELECT smurf.org_id, genus, section, real_name, sm_protein_id, CONCAT(smurf.org_id, '_', sm_protein_id) AS custom_id, CONCAT(smurf.org_id, '_', clust_backbone, '_', clust_size) AS clust_id FROM smurf JOIN organism ON smurf.org_id = organism.org_id AND sm_short = 'HYBRID';")
hybridsBySection <- aggregate(clust_id ~ real_name + section, hybridDf, length)
boxes <- ggplot(hybridsBySection, aes(x=section, y=clust_id, fill = section)) + geom_boxplot() + guides(fill = FALSE) + ylab("Counts") + xlab("Section")
#ggsave(file = '/home/seth/aspSecMet/hybrids/overview.pdf', plot = boxes, device = "pdf", width = 10)
ggsave(file = '/home/seth/aspSecMet/hybrids/overview.svg', plot = boxes, device = "svg", width = 10)
# Putting counts on the tree
hybridCounts <- as.data.frame(table(hybridDf$real_name))
hybridCounts$Var1 <- as.character(hybridCounts$Var1)
tipNames <- data.frame(tips = rnTree$tip.label)
tipCounts <- left_join(tipNames, hybridCounts, by = c("tips" = "Var1"))
tipCounts$Freq[is.na(tipCounts$Freq)] <- 0
#pdf(file = '/home/seth/aspSecMet/hybrids/spciesTree.pdf', height = 10, width = 10)
svg(file = '/home/seth/aspSecMet/hybrids/spciesTree.svg', height = 10, width = 10)
plot(rnTree, align.tip.label = TRUE, type = 'fan', label.offset = 0.1)
tiplabels(tipCounts$Freq)
dev.off()
# Inspecting families based on whole gene clusters
hybridFams <- gcHcDf[gcHcDf$q_clust %in% hybridDf$clust_id,]
table(hybridFams$real_name)
as.matrix(table(hybridFams[c('cc', 'real_name')]))
print(paste0("Hybrid genes: ", dim(unique(hybridDf[,c('org_id', 'sm_protein_id')]))[1]))
print(paste0(length(unique(hybridFams$q_clust))," hybrid gene carrying clusters are distributed over ",length(unique(hybridFams$cc))," orthologous families"))
# Create dendrogram of Hybrids
hybridBlast <- aspDbFetch("SELECT bidir.*,
CONCAT(bidir.q_org_id,'_',bidir.q_protein_id) AS q_custom,
CONCAT(bidir.h_org_id,'_',bidir.h_protein_id) AS h_custom  FROM smurf
JOIN smurf_bidir_hits AS bidir ON sm_short = 'HYBRID'
AND smurf.org_id = bidir.q_org_id AND smurf.sm_protein_id = bidir.q_protein_id
;")
head(hybridBlast)
?split
blastSplit <- split(hybridBlast[,c('q_custom', 'h_custom'), hybridBlast$q_custom])
blastNetwork <- hybridBlast[,c('q_custom', 'h_custom')]
blastSplit <- split(blastNetwork, blastNetwork$q_custom)
blastSplit[1]
blastNetwork <- hybridBlast[,c('q_custom', 'h_custom')]
blastNetwork <- hybridBlast[,c('q_custom', 'h_custom')]
blastNetwork <- blastNetwork[blastNetwork$q_custom!=blastNetwork$h_custom]
blastNetwork <- hybridBlast[,c('q_custom', 'h_custom')]
blastNetwork <- blastNetwork[blastNetwork$q_custom!=blastNetwork$h_custom,]
simpleNetwork(blastNetwork)
simpleNetwork(blastNetwork, charge = -300, fontSize = 18, linkDistance = 100)
simpleNetwork(blastNetwork, fontSize = 14, linkDistance = 50)
require(magrittr)
library(magrittr)
simpleNetwork(blastNetwork, fontSize = 14, linkDistance = 100)%>%
saveNetwork(file = '/home/seth/aspSecMet/progress/network.html')
simpleNetwork(blastNetwork, fontSize = 14, linkDistance = 100)%>%
saveNetwork(file = '/home/seth/aspSecMet/hybrids/networkOfHybridGenes.html')
data(mtcars)
head(mtcars)
write.table(mtcars, file = "mtcars.tsv")
read.table("mtcars.tsv")
library(igraph)
karate <- make_graph("Zachary")
wc <- cluster_walktrap(karate)
modularity(wc)
membership(wc)
plot(wc, karate)
ceb <- cluster_edge_betweenness(karate)
plot(ceb, karate)
plot(wc, karate)
plot(ceb, karate)
set.seed(123)
plot(wc, karate)
plot(ceb, karate)
?make_graph
non <- make_graph("Nonline")
lev <- make_graph("Levi")
myGraphs <- lapply("Zachary", "Nonline", "Levi", function(x){
tempg <- make_graph(x)
wc <- cluster_walktrap(tempg)
ceb <- cluster_edge_betweenness(tempg)
})
myGraphs <- lapply("Zachary", "Coxeter", "Levi", function(x){
tempg <- make_graph(x)
wc <- cluster_walktrap(tempg)
ceb <- cluster_fast_greedy(tempg)
list(g = tempg, wc = wc, ceb = ceb)
})
myGraphs <- lapply(c("Zachary", "Coxeter", "Levi"), function(x){
tempg <- make_graph(x)
wc <- cluster_walktrap(tempg)
ceb <- cluster_fast_greedy(tempg)
list(g = tempg, wc = wc, ceb = ceb)
})
myGraphs
plot(myGraphs[[1]]$g)
plot(myGraphs[[2]]$g)
plot(myGraphs[[3]]$g)
plot(myGraphs[[1]]$g)
sel <- myGraphs[[1]]
plot(sel$g)
plot(sel$wc, sel$g)
plot(sel$ceb, sel$g)
plot(sel$wc, sel$g)
plot(sel$ceb, sel$g)
plot(sel$g)
svg('/home/seth/reveal.js/figures/exNet1.svg')
plot(sel$g)
dev.off()
svg('/home/seth/reveal.js/figures/exNet1.svg')
plot(sel$wc, sel$g)
dev.off()
svg('/home/seth/reveal.js/figures/exNet1.svg')
plot(sel$ceb, sel$g)
dev.off()
svg('/home/seth/reveal.js/figures/exNet1.svg')
plot(sel$g)
dev.off()
svg('/home/seth/reveal.js/figures/exNet2.svg')
plot(sel$wc, sel$g)
dev.off()
svg('/home/seth/reveal.js/figures/exNet3.svg')
plot(sel$ceb, sel$g)
dev.off()
gcon <- contract.vertices(sel$g, membership(sel$wc), vertex.attr.comb = list(weight = "mean", "ignore"))
gcon <- igraph::simplify(gcon, edge.attr.comb = list(weight = "mean"))
plot(gcon)
plot(sel$wc, sel$g)
plot(gcon)
svg('/home/seth/reveal.js/figures/exNet4.svg')
plot(gcon)
dev.off()
vec1 <- c(1,2,3,4,5)
vec2 <- c('a','a','b','b','e')
df <- data.frame(vec1, vec2, stringsAsFactors = FALSE)
aggregate(df, by=list(df$vec2), FUN=sd ) # standard deviation
aggregate(df, by=list(df$vec2), FUN=mean) # mean value
aggregate(df, by=list(df$vec2), FUN=max ) # maximum value
aggregate(df, by=list(df$vec2), FUN=sd ) # standard deviation
aggregate(df, by=list(df$vec2), FUN=mean) # mean value
aggregate(df, by=list(df$vec2), FUN=max ) # maximum value
data("mtcars")
mtcars <- data("mtcars")
mtcars
data("AirPassengers")
mtcars
library(datasets)
data("mtcars")
mrcars
mtcars
head(mtcars)
aggregate(mtcars$mpg, by = list(mtcars$cyl), FUN = mean)
png("newPLot.png" width = 12, height =7)
hist(c(1,1,1,1,1,2,2,2,3,3))
dev.off()
hist(c(1,1,1,1,1,2,2,2,3,3))
png("newPLot.png", width = 12, height =7)
hist(c(1,1,1,1,1,2,2,2,3,3))
dev.off()
png("newPLot.png", width = 12, height =7, units = 'in')
hist(c(1,1,1,1,1,2,2,2,3,3))
dev.off()
png("newPLot.png")
hist(c(1,1,1,1,1,2,2,2,3,3))
dev.off()
c(5,5,5,5,10,10,10,15,20,5,10)
a <- c(5,5,5,5,10,10,10,15,20,5,10)
?quartile
a[sort(a)]
a[order(a)]
a <- a[order(a, decreasing = TRUE)]
a
sum(a)
limit <- sum(a)/2
limit
for(i in a){
if(res <= limit){
res = res + i
print(res)
}
}
res <- 0
for(i in a){
if(res <= limit){
res = res + i
print(res)
}
}
res <- 0
for(i in a){
if(res < limit){
res = res + i
print(res)
}
}
res <- 0
for(i in a){
if(res < limit){
res = res + i
print(res)
}
}
res <- 0
for(i in a){
if(res < limit){
res = res + i
print(res)
}
}
res <- 0
optindex <- 0
for(i in a){
res = res + i
if(res < limit){
optindex +1
print(res)
print(optindex)
}
}
res <- 0
optindex <- 0
for(i in a){
res = res + i
if(res < limit){
optindex <- optindex +1
print(res)
print(optindex)
}
}
c(rep("Condensation", 10), rep("Adenylation", 10), "ASomething", rep("BSomething", 12)
)
annVec <- c(rep("Condensation", 10), rep("Adenylation", 10), "ASomething", rep("BSomething", 12))
annVec
table(annVec)
as.data.frame(table(annVec))
?table
annTemp <- as.data.frame(table(annVec))
annTemp[order(annTemp$Freq)]
annTemp$annVec[order(annTemp$Freq)]
str(annTemp)
annTemp$annVec <-  as.character(annTemp$annVec)
annTemp$annVec[order(annTemp$Freq)]
?order
annTemp$annVec[order(annTemp$Freq, decreasing = TRUE)]
?reorder.factor
annVec <- as.factor(annVec, levels = annOrder)
annVec <- factor(annVec, levels = annOrder)
annOrder <- annTemp$annVec[order(annTemp$Freq, decreasing = TRUE)]
annVec <- factor(annVec, levels = annOrder)
annVec
source("/home/seth/asptools/syntenyPlotTool.R")
library(Gviz)
clusters <- c("10_449446_1","11_316679_3","16_431105_1","19_444313_3","51447_3","4_199648_3","7_517619_3")
fullGviz(clusters)
source("/home/seth/asptools/syntenyPlotTool.R")
fullGviz(clusters)
source("/home/seth/asptools/hConnectAspMine.R")
fullGviz(clusters)
source("/home/seth/asptools/syntenyPlotTool.R")
clusters <- c("10_449446_1","11_316679_3","16_431105_1","19_444313_3","51447_3","4_199648_3","7_517619_3")
fullGviz(clusters)
source("/home/seth/asptools/hConnectAspMine.R")
fullGviz(clusters)
source("/home/seth/asptools/syntenyPlotTool.R")
fullGviz(clusters)
source("/home/seth/asptools/syntenyPlotTool.R")
fullGviz(clusters)
source("/home/seth/asptools/hConnectAspMine.R")
fullGviz(clusters)
source("/home/seth/asptools/syntenyPlotTool.R")
fullGviz(clusters)
source("/home/seth/asptools/syntenyPlotTool.R")
fullGviz(clusters)
source("/home/seth/asptools/hConnectAspMine.R")
fullGviz(clusters)
source("/home/seth/asptools/hConnectAspMine.R")
fullGviz(clusters)
source("/home/seth/asptools/syntenyPlotTool.R")
fullGviz(clusters)
source("/home/seth/asptools/syntenyPlotTool.R")
fullGviz(clusters)
source("/home/seth/asptools/syntenyPlotTool.R")
fullGviz(clusters)
source("/home/seth/asptools/syntenyPlotTool.R")
fullGviz(clusters)
source("/home/seth/asptools/syntenyPlotTool.R")
fullGviz(clusters)
source("/home/seth/asptools/syntenyPlotTool.R")
fullGviz(clusters)
source("/home/seth/asptools/syntenyPlotTool.R")
fullGviz(clusters)
source("/home/seth/asptools/syntenyPlotTool.R")
fullGviz(clusters)
clustDat <- fullGviz(clusters)
plotTracks(clustDat[[1]])
plotTracks(clustDat[[1]],  groupAnnotation = "group", extend.left=400 , featureAnnotation = "feature")
source("/home/seth/asptools/syntenyPlotTool.R")
clustDat <- fullGviz(clusters)
plotTracks(clustDat[[1]],  groupAnnotation = "group", extend.left=400 , featureAnnotation = "feature")
plotTracks(clustDat[[1]],  groupAnnotation = "group", extend.left=400 , featureAnnotation = "feature", A = "red", B = "green", c = "blue")
library(RColorBrewer)
bpal <- c(brewer.pal(12,"Set3"), brewer.pal(8, "Dark2"))
plotTracks(clustDat[[1]],  groupAnnotation = "group", extend.left=400 , featureAnnotation = "feature", A = bpal[1], B = bpal[2] c = bpal[3])
plotTracks(clustDat[[1]],  groupAnnotation = "group", extend.left=400 , featureAnnotation = "feature", A = bpal[1], B = bpal[2], C = bpal[3])
display.brewer.all()
gvizpal <- c(brewer.pal(8,"Dark2"), brewer.pal(9, "Set1"))
plotTracks(clustDat[[1]],  groupAnnotation = "group", extend.left=400 , featureAnnotation = "feature", A = bpal[1], B = bpal[2], C = bpal[3])
gzpal <- c(brewer.pal(8,"Dark2"), brewer.pal(9, "Set1"))
plotTracks(clustDat[[1]],  groupAnnotation = "group", extend.left=400 , featureAnnotation = "feature", A = gzpal[1], B = gzpal[2], C = gzpal[3])
plotTracks(clustDat[[1]],  groupAnnotation = "group", extend.left=400 , featureAnnotation = "feature", A = gzpal[1], B = gzpal[2], C = gzpal[3], D= gzpal[4], E = gzpal[5], H = gzpal[6])
shiny::runApp('aspmine/Apps/development/s_familiesPhyloTreeApp')
library(digest)
exampleSeq <-read.table("/home/seth/aspmine/Apps/development/exampleSeqForHash.txt", stringsAsFactors = FALSE)$V1
md5Db <- read.csv("/home/seth/aspApps/data/secMetMd5.csv")
fasta <- exampleSeq
fasta <- tolower(fasta)
if(substr(fasta,nchar(fasta),nchar(fasta)) != "*"){
fasta <-paste0(fasta, '*') # remember to add a star at the end of the user input for the right md5 hash
}
fastaMd5 <- digest(fasta, algo = 'md5')
md5Db <- read.csv("/home/seth/aspApps/data/secMetMd5.csv")
md5Db$sm_protein_id[md5Db$md5 == fastaMd5,]
md5Db$sm_protein_id[md5Db$md5 == fastaMd5]
md5Db[md5Db$md5 == fastaMd5,]
md5Db$sm_protein_id[md5Db$md5 == fastaMd5 & md5Db$org_id == 1]
print("Hello World!")
setwd("/home/seth/Downloads/bacteria-ac58a2a9-8a46-4db4-a775-d3cbcb2b82cf")
dat <- read.table('geneclusters.txt')
head(dat)
dat <- read.table('geneclusters.txt', sep = '/t')
dat <- read.table('geneclusters.txt', sep = '/t')
dat <- read.table('geneclusters.txt', sep = '\t')
head(dat)
dat <- dat[c(2,3)]
dat
?aggregate
dat
dat$V3
as.character(dat$V3)
library(ggplot2)
dat$V3 <- as.character(dat$V3)
ggplot(dat) + geom_histogram(aes(x = V2, y = V3))
ggplot(dat) + geom_histogram(aes(x = V3))
ggplot(dat) + geom_histogram(aes(x = V3), stat = 'count')
?geom_histogram
ggplot(dat) + geom_histogram(aes(x = V3), stat = 'count', position = 'stack')
ggplot(dat) + geom_bar(aes(x = V2, y= V3), stat = 'count', position = 'stack')
ggplot(dat) + geom_bar(aes(x = V2, y= V3), position = 'stack')
ggplot(dat) + geom_bar(aes(x = V2, y= V3),)
ggplot(dat) + geom_bar(aes( y= V3))
ggplot(dat) + geom_bar(aes( x= V3))
ggplot(dat) + geom_bar(aes( x= V3), position = 'stack')
ggplot(dat) + geom_bar(aes( x= V2), position = 'stack')
dat
dat2 <- dat
dat2$V2
dat <- read.table('geneclusters.txt', sep = '\t', stringsAsFactors = FALSE)
dat <- dat[c(2,3)]
dat2 <- dat
dat2$V2
dat2$V2 <- rep('otherOrg', nrow(dat))
dat <- rbind(dat, dat2)
head(dat)
dat
ggplot(dat) + geom_bar(aes( x= V2), position = 'stack')
ggplot(dat) + geom_histogram(aes(x = V3), stat = 'count', position = 'stack')
ggplot(dat) + geom_bar(aes( x= V2), stat = 'identity')
ggplot(dat) + geom_bar(aes( x= V2, y = V3), stat = 'identity')
ggplot(dat) + geom_bar(aes( x= V2, y = V3), stat = 'identity', fill = factor(V2))
ggplot(dat) + geom_bar(aes( x= V2, y = V3, fill = factor(V2)), stat = 'identity', )
ggplot(dat) + geom_bar(aes( x= V2, y = V3, fill = factor(V3)), stat = 'identity', )
ggplot(dat) + geom_bar(aes( x= V2, y = V3, fill = factor(V3)), stat = 'identity' )
ggplot(dat) + geom_bar(aes( x= V2, y = V3, fill = factor(V3)) )
ggplot(dat) + geom_bar(aes( x= V2, y = V3, fill = factor(V3)), stat = 'identity', position = 'stack')
aggregate(V3~ V2,  data = dat, FUN = length)
aggregate( V2,  data = dat, FUN = length)
aggregate( V2 ~ .,  data = dat, FUN = length)
ggplot(dat) + geom_histogram(aes(x = V3), stat = 'count', position = 'stack')
ggplot(dat) + geom_histogram(aes(x = V3, fill = V2), stat = 'count', position = 'stack')
ggplot(dat) + geom_histogram(aes(x = V2, fill = V3), stat = 'count', position = 'stack')
ggplot(dat) + geom_histogram(aes(x = V2, fill = V3), stat = 'count', position = 'dodge')
p <- ggplot(dat) + geom_histogram(aes(x = V2, fill = V3), stat = 'count', position = 'dodge')
p$data
datOrg <- split(dat, dat$V2)
datOrg
datOrg <- split(dat$V3, dat$V2)
lapply(datOrg, function(x){
as.data.frame(table(x))
})
p <- ggplot(dat) + geom_histogram(aes(x = V2, fill = V3), stat = 'count', position = 'stack')
p
mtcars
help(mtcars)
head(iris)
ggplot(mtcars) + geom_bar(aes(mpg))
ggplot(mtcars) + geom_bar(aes(y = mpg))
ggplot(mtcars) + geom_bar(aes(x = mpg, group = rownames(mtcars)))
ggplot(mtcars) + geom_bar(aes(x = rownames(mtcars)))
ggplot(mtcars) + geom_bar(aes(x = rownames(mtcars), y = mpg))
ggplot(mtcars) + geom_bar(aes(x = rownames(mtcars), y = mpg, stat = 'identity'))
diamonds
head(dat)
ggplot(dat) + geom_bar(aes(x = V2, y = V3))
install.packages("ggplot2")
library("ape", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install.packages("reshape2")
library(reshape2)
mtcars
wind
iris
ggplot(iris) + geom_scatter(x = Sepal.Length, y = Petal.Length, fill = Species)
ggplot(iris) + geom_point(x = Sepal.Length, y = Petal.Length, fill = Species)
ggplot(iris) + geom_point(x = Sepal.Length, y = Petal.Length, fill = Species)
iris
names(iris)
ggplot(iris) + geom_point(aes(x = Sepal.Length, y = Petal.Length, fill = Species))
ggplot(iris) + geom_point(aes(x = Sepal.Length, y = Petal.Length, fill = factor(Species)))
ggplot(iris) + geom_point(aes(x = Sepal.Length, y = Petal.Length, fill = as.factor(Species)))
iris
ggplot(iris) + geom_point(aes(x = Sepal.Length, y = Petal.Length, color = as.factor(Species)))
ggplot(iris) + geom_point(aes(x = Sepal.Length, y = Petal.Length, color = Species))
ggsave("ggplotExample.png")
setwd("/home/seth/seth-1.github.io/figures")
iris
ggplot(iris) + geom_point(aes(x = Sepal.Length, y = Petal.Length, color = Species))
ggsave("ggplotExample.png")
head(iris)
getwd()
